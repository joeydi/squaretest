import Head from "next/head";

export function ItemCard({ item, image }) {
    return (
        <div className="card h-100">
            <picture className="aspect-square">
                <img src={image.imageData.url} className="card-img-top" alt="" />
            </picture>
            <div className="card-body">
                <h2 className="h4 card-title">{item.itemData.name}</h2>
                <p className="card-text">
                    Some quick example text to build on the card title and make up the bulk of the card&rsquo;s content.
                </p>
                <div className="d-flex align-items-center justify-content-between">
                    {item.itemData.variations.map((variation) => (
                        <p key={variation.id} className="mb-0">
                            <strong>
                                {`$${(Math.round(variation.itemVariationData.priceMoney.amount) / 100).toFixed(2)}`}
                            </strong>
                        </p>
                    ))}
                    <a href="#" className="btn btn-sm btn-primary">
                        Buy
                    </a>
                </div>
            </div>
        </div>
    );
}

export default function Home({ items, categories, images }) {
    console.log(items);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="my-5">
                <div className="container">
                    <h1 className="mb-4">Square</h1>
                    <div className="row g-4">
                        {items.map((item) => {
                            const image = images.find((image) => image.id === item.itemData.imageIds[0]);
                            return (
                                <div key={item.id} className="col-sm-6 col-md-4 col-lg-3">
                                    <ItemCard item={item} image={image} />
                                </div>
                            );
                        })}
                    </div>
                </div>
            </main>
        </>
    );
}

export async function getStaticProps(context) {
    const JSONBig = require("json-bigint");
    const { Client, Environment, ApiError } = require("square");

    const client = new Client({
        accessToken: process.env.SQUARE_ACCESS_TOKEN,
        environment: Environment.Sandbox,
    });

    const { catalogApi } = client;

    async function getCatalog() {
        try {
            let listCatalogResponse = await catalogApi.listCatalog(undefined, "ITEM,CATEGORY,IMAGE");
            let objects = listCatalogResponse.result.objects;
            objects = JSONBig.parse(JSONBig.stringify(objects));

            return objects;
        } catch (error) {
            if (error instanceof ApiError) {
                error.result.errors.forEach(function (e) {
                    console.log(e.category);
                    console.log(e.code);
                    console.log(e.detail);
                });
            } else {
                console.log("Unexpected error occurred: ", error);
            }
        }
    }

    let objects = await getCatalog();

    const items = objects.filter((object) => object.type === "ITEM");
    const categories = objects.filter((objects) => objects.type === "CATEGORY");
    const images = objects.filter((objects) => objects.type === "IMAGE");

    return {
        props: {
            items,
            categories,
            images,
        },
    };
}
